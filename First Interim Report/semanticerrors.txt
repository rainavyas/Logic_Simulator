General Error Handling:
Both syntax and semantic errors will stop the program and print a report to the user highlighting the nature of the error.

Syntax Errors:
  Syntax errors will automatically break and provide a suitable error description and position.

Semantic Errors:
  Semantic errors will be handled individually as below. In each case the program will break (an exception raised) and a suitable description provided.
  # Could specify multiple inputs/outputs for given type. E.g. clk1 is CLOCK with initial 0, with 5 inputs.
    If parser detects >1 'with' statements, break and report to user "ArgumentError: illegal device port assignment."
    Could add alternation to definition but this makes handling "DTYPE" difficult.

  # Devices may take arguments not suitable to their type e.g. AND1 is AND with period 3 (AND doesn't take argument 'period').
    Scanner reports any logic other than "CLOCK" as having illegal port assignment if "with period" provided.
    Scanner reports "CLOCK" as having illegal port assignment if "input" or "inputs" given.

  # 1 input could be specified as "with 1 input" or "with 1 inputs" (both are legal).
    Design scanner to accept either option.

  # Monitor only outputs/all points.
    Decision to allow monitoring of all points. Worth mentioning for report.

  # User can define a number of devices and monitoring points in "specfile" but potentially no connections. This is valid but may provide monitoring point outputs which make no sense.
    At least one connection would not solve this (some gates require multiple inputs so may be left floating.)
    Handle by checking that all gates have their inputs connected to something and return an error to user if not.

  # Currently possible for the same name to be entered multiple time, even for different types. Semantic as no way of telling which pin connects to which despite being different devices.
    If the same name is used more than once, break and report this to the user.

  # Possible to connect pins to themselves. This makes sense for inputs but is redundant for outputs.
    Don't need to break here; don't accept connections from outputs to outputs.
    Scanner checks that at least one pin is of form "name.Ix" where x is a number.

  # Alternatively, at least one of the pins must be an input and the other an output (non-directional).
    Check that there is at least one of each type. In both cases report this to user.

  # Connection could reference non-existent pins e.g. "CLOCK1.I1 connects AND1.CLEAR".
    Check "type" and number of assigned inputs before assigning connection. Break and print error to user if invalid pins chosen.

  # Monitor point could reference non-existent pin. E.g. "monitor_point = monitor XOR1.I3" (XOR only has I1 and I2). Also possible to monitor Q or QBAR of "AND" gate etc.
    Check "type" and number of assigned inputs before assigning monitoring points. Break and print error to user if invalid pins chosen.

  # Allow identical monitoring points? Could specify more monitoring points than there are connections available.
    Doesn't appear to be a problem but may want to prevent duplicate monitoring points.
