[
  "test_devices.py::test_get_device",
  "test_devices.py::test_find_devices",
  "test_devices.py::test_make_device",
  "test_devices.py::test_make_device_gives_errors[(AND1_ID, new_devices.AND, [17])-new_devices.INVALID_QUALIFIER]",
  "test_devices.py::test_make_device_gives_errors[(SW1_ID, new_devices.SWITCH, None)-new_devices.NO_QUALIFIER]",
  "test_devices.py::test_make_device_gives_errors[(X1_ID, new_devices.XOR, [2])-new_devices.QUALIFIER_PRESENT]",
  "test_devices.py::test_make_device_gives_errors[(D_ID, D_ID, None)-new_devices.BAD_DEVICE]",
  "test_devices.py::test_make_device_gives_errors[(CL_ID, new_devices.CLOCK, [0])-new_devices.INVALID_QUALIFIER]",
  "test_devices.py::test_make_device_gives_errors[(CL_ID, new_devices.CLOCK, [10])-new_devices.NO_ERROR]",
  "test_devices.py::test_make_device_gives_errors[(X2_ID, new_devices.XOR)-new_devices.DEVICE_PRESENT]",
  "test_devices.py::test_make_device_gives_errors[(SW2_ID, new_devices.SWITCH, [0 , 1])-new_devices.EXCESS_QUALIFIER]",
  "test_devices.py::test_get_signal_name",
  "test_devices.py::test_get_signal_ids",
  "test_devices.py::test_set_switch",
  "test_monitors.py::test_make_monitor",
  "test_monitors.py::test_make_monitor_gives_errors",
  "test_monitors.py::test_remove_monitor",
  "test_monitors.py::test_get_signal_names",
  "test_monitors.py::test_record_signals",
  "test_monitors.py::test_get_margin",
  "test_monitors.py::test_reset_monitors",
  "test_monitors.py::test_display_signals",
  "test_names.py::test_get_name_string_raises_exceptions",
  "test_names.py::test_get_name_string[0-Alice]",
  "test_names.py::test_get_name_string[1-Bob]",
  "test_names.py::test_get_name_string[2-Eve]",
  "test_names.py::test_get_name_string[3-None]",
  "test_names.py::test_query_raises_exceptions",
  "test_names.py::test_query[0-Alice]",
  "test_names.py::test_query[1-Bob]",
  "test_names.py::test_query[2-Eve]",
  "test_names.py::test_lookup_raises_exceptions",
  "test_names.py::test_lookup[name_ids0-expected_string_list0]",
  "test_names.py::test_lookup[name_ids1-expected_string_list1]",
  "test_names.py::test_lookup[name_ids2-expected_string_list2]",
  "test_names.py::test_unique_error_codes",
  "test_names.py::test_unique_error_codes_raises_exceptions",
  "test_network.py::test_get_connected_output",
  "test_network.py::test_get_input_signal",
  "test_network.py::test_get_output_signal",
  "test_network.py::test_check_network",
  "test_network.py::test_make_connection",
  "test_network.py::test_make_connection_gives_error[(I1, I1, OR1_ID, I2)-network.DEVICE_ABSENT]",
  "test_network.py::test_make_connection_gives_error[(OR1_ID, I2, OR1_ID, I2)-network.INPUT_TO_INPUT]",
  "test_network.py::test_make_connection_gives_error[(SW1_ID, None, OR1_ID, None)-network.OUTPUT_TO_OUTPUT]",
  "test_network.py::test_make_connection_gives_error[(SW1_ID, I1, OR1_ID, I2)-network.PORT_ABSENT]",
  "test_network.py::test_make_connection_gives_error[(SW2_ID, None, OR1_ID, I2)-network.NO_ERROR]",
  "test_network.py::test_make_connection_gives_error[(OR1_ID, I2, SW2_ID, None)-network.NO_ERROR]",
  "test_network.py::test_make_connection_gives_error[(SW1_ID, None, OR1_ID, I1)-network.INPUT_CONNECTED]",
  "test_network.py::test_execute_xor",
  "test_network.py::test_execute_non_xor_gates[AND1_ID-switch_outputs0-LOW-devices.AND]",
  "test_network.py::test_execute_non_xor_gates[AND1_ID-switch_outputs1-HIGH-devices.AND]",
  "test_network.py::test_execute_non_xor_gates[NAND1_ID-switch_outputs2-LOW-devices.NAND]",
  "test_network.py::test_execute_non_xor_gates[NAND1_ID-switch_outputs3-HIGH-devices.NAND]",
  "test_network.py::test_execute_non_xor_gates[OR1_ID-switch_outputs4-LOW-devices.OR]",
  "test_network.py::test_execute_non_xor_gates[OR1_ID-switch_outputs5-HIGH-devices.OR]",
  "test_network.py::test_execute_non_xor_gates[NOR1_ID-switch_outputs6-LOW-devices.NOR]",
  "test_network.py::test_execute_non_xor_gates[NOR1_ID-switch_outputs7-HIGH-devices.NOR]",
  "test_network.py::test_execute_non_gates",
  "test_network.py::test_execute_siggen",
  "test_network.py::test_oscillating_network",
  "test_parse.py::test_parse_network",
  "test_parse.py::test_error[1-Line 33:-'END' keyword required at end of file]",
  "test_parse.py::test_error[2-Line 1:-Expected '{' after 'DEVICES']",
  "test_parse.py::test_error[3-Line 1:-'DEVICES' keyword required]",
  "test_parse.py::test_error[4-Line 15:-Expected '{' after 'CONNECT']",
  "test_parse.py::test_error[5-Line 15:-'CONNECT' keyword required]",
  "test_parse.py::test_error[6-Line 29:-Expected '{' after 'MONITOR']",
  "test_parse.py::test_error[7-Line 29:-'MONITOR' keyword required]",
  "test_parse.py::test_error[8-Line 4:-Needs to be a positive integer]",
  "test_parse.py::test_error[9-Line 5:-Expected a parameter: 'initial','inputs', 'sequence' or 'period']",
  "test_parse.py::test_error[10-Line 6:-Expected a parameter: 'initial','inputs', 'sequence' or 'period']",
  "test_parse.py::test_error[11-Line 5:-Device definition needs to end in ';']",
  "test_parse.py::test_error[12-Line 4:-Device name has to be followed by ':']",
  "test_parse.py::test_error[13-Line 6:-Valid Device name required]",
  "test_parse.py::test_error[14-Line 7:-Valid Logic gate required e.g. 'AND']",
  "test_parse.py::test_error[15-Line 23:-Output pin has to be 'Q' or 'QBAR']",
  "test_parse.py::test_error[16-Line 22:-Connection has to be terminated by ';']",
  "test_parse.py::test_error[17-Line 24:-Valid input pin required]",
  "test_parse.py::test_error[18-Line 25:-'.' required to specify input pin]",
  "test_parse.py::test_error[19-Line 20:-Name string of input device required]",
  "test_parse.py::test_error[20-Line 26:-'=' Assignment operator requried]",
  "test_parse.py::test_error[21-Line 30:-Valid string name required]",
  "test_parse.py::test_error[22-Line 30:-Monitor point has to be terminated by ';']",
  "test_parse.py::test_error[23-Line 11:-Missing '}']",
  "test_parse.py::test_error[24-Line 5:-Device Name already used]",
  "test_parse.py::test_error[25-Line 4:-Expected a parameter: 'initial','inputs', 'sequence' or 'period']",
  "test_parse.py::test_error[26-Line 7:-Expected a parameter: 'initial','inputs', 'sequence' or 'period']",
  "test_parse.py::test_error[27-Line 4:-Needs to be a positive integer]",
  "test_parse.py::test_error[28-Line 8:-Valid device qualifier requried]",
  "test_parse.py::test_error[29-Line 12:-Device is not declared]",
  "test_parse.py::test_error[30-Line 20:-Input is already in a connection]",
  "test_parse.py::test_error[31-Line 23:-Output pin has to be 'Q' or 'QBAR']",
  "test_parse.py::test_error[32-Line 24:-Valid input pin required]",
  "test_parse.py::test_error[33-Line 23:-'.' required to specify input pin]",
  "test_parse.py::test_error[34-Line 31:-Output pin has to be 'Q' or 'QBAR']",
  "test_parse.py::test_error[35-Line 32:-This point is already being monitored]",
  "test_parse.py::test_error[36-Line 7:-Too many qualifiers]",
  "test_parse.py::test_error[37-Line 3:-SIGGEN signal values can only be '0' or '1']",
  "test_parse.py::test_devices_and_connections[0-clock1-CLOCK-device_inputs0-connected_to0]",
  "test_parse.py::test_devices_and_connections[1-clock2-CLOCK-device_inputs1-connected_to1]",
  "test_parse.py::test_devices_and_connections[2-clock3-CLOCK-device_inputs2-connected_to2]",
  "test_parse.py::test_devices_and_connections[3-switch1-SWITCH-device_inputs3-connected_to3]",
  "test_parse.py::test_devices_and_connections[4-switch2-SWITCH-device_inputs4-connected_to4]",
  "test_parse.py::test_devices_and_connections[5-nand-NAND-device_inputs5-connected_to5]",
  "test_parse.py::test_devices_and_connections[6-xor-XOR-device_inputs6-connected_to6]",
  "test_parse.py::test_devices_and_connections[7-dtype-DTYPE-device_inputs7-connected_to7]",
  "test_parse.py::test_devices_and_connections[8-siggy-SIGGEN-device_inputs8-connected_to8]",
  "test_parse.py::test_monitors[0-clock1]",
  "test_parse.py::test_monitors[1-clock3]",
  "test_parse.py::test_monitors[2-switch1]",
  "test_parse.py::test_monitors[3-xor]",
  "test_parse.py::test_monitors[4-dtype.QBAR]",
  "test_parse.py::test_monitors[5-dtype.Q]",
  "test_parse.py::test_monitors[6-siggy]",
  "test_scanner.py::test_get_name",
  "test_scanner.py::test_get_number",
  "test_scanner.py::test_advance",
  "test_scanner.py::test_skip_spaces",
  "test_scanner.py::test_skip_comment_single",
  "test_scanner.py::test_skip_comment_multi",
  "test_scanner.py::test_location",
  "test_scanner.py::test_print_location_false",
  "test_scanner.py::test_print_location_true",
  "test_scanner.py::test_get_symbol"
]