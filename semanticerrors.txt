General Error Handling:
Both syntax and semantic errors will stop the program and print a report to the user highlighting the nature of the error.

Syntax Errors:
  Syntax errors will automatically break and provide a suitable error description and position.

Semantic Errors:
  Semantic errors will be handled individually as below. In each case the program will break (an exception raised) and a suitable description provided.
  # Could specify multiple inputs/outputs for given type. E.g. clk1 is CLOCK with initial 0, with 5 inputs.
    If parser detects >1 'with' statements, break and report to user "ArgumentError: illegal device port assignment."
    Could add alternation to definition but this makes handling "DTYPE" difficult.

  # Devices may take arguments not suitable to their type e.g. AND1 is AND with period 3 (AND doesn't take argument 'period').
    Scanner reports any logic other than "CLOCK" as having illegal port assignment if "with period" provided.
    Scanner reports "CLOCK" as having illegal port assignment if "input" or "inputs" given.

  # 1 input could be specified as "with 1 input" or "with 1 inputs" (both are legal).
    Design scanner to accept either option.

  # 'name.pin' to the left of 'connects' must be an output; 'name.pin' to the right must be an input.
    Scanner checks whether pin to left is of form "name.Ix" where x is a number and that the one to the right is not of this form.

  # Alternatively, at least one of the pins must be an input and the other an output (non-directional).
    Check that there is at least one of each type. In both cases report this to user.

  # Monitor only outputs/all points.
    Decision to allow monitoring of all points. Worth mentioning for report.

  #
